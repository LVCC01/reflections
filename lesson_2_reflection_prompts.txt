What happens when you initialize a repository? Why do you need to do it?
it creates a folder named .git which has contents which will be used by GIT to create online repository 

How is the staging area different from the working directory and the repository?
What value do you think it offers?
it is one level away from committing. It gives us control on which files needed to be committed

How can you use the staging area to make sure you have one commit per logical
change?
compare the file in staging area with the last committed file-check the number of logical changes and then commit by adding a commit message

What are some situations when branches would be helpful in keeping your history
organized? How would branches help?
adding a new feature, making some experimental changes 

How do the diagrams help you visualize the branch structure?
it tells which was the last common commit between the two branches
which are the different commits on each branch
how many branches are there
is there any unreachable commit

What is the result of merging two branches together? Why do we represent it in
the diagram the way we do?
merging two branches together will bring in the changes of the two branches in one branch (master). 
The diagram helps in finding the point where the branches split and what chnages are included in the merge 

What are the pros and cons of Git's automatic merging vs. always doing merges
manually?
automatic merging might create issues which the programmer might not be aware of.
manual merging gives total control of what goes into the final version